/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.spark.mllib.feature

import org.apache.spark.mllib.linalg.{Vector, Vectors}
import org.scalatest.{FunSuite, ShouldMatchers}


class EuclideanLSHSuite extends FunSuite with ShouldMatchers {

  test("the hash values should be expected") {
    val vectors = Array(
      Vectors.dense(0.0, 0.0),
      Vectors.dense(0.0, 0.1),
      Vectors.dense(0.1, 0.0),

      Vectors.dense(5.0, 5.0),
      Vectors.dense(5.0, 5.1),
      Vectors.dense(5.1, 5.0),

      Vectors.dense(10.0, 10.0),
      Vectors.dense(9.9, 10.0),
      Vectors.dense(10.0, 9.9),
      Vectors.dense(9.9, 9.9)
    )
    val expectedValues = Array(
      0.0, 0.0, 0.0,
      1.0, 1.0, 1.0,
      3.0, 3.0, 3.0, 3.0
    )

    val seed = 1234
    val w = 2
    val b = 1 // b should be from 0 to w
    val randomVector = EuclideanLSH.generateRandomVector(vectors(0).size, seed)
    val hash = new EuclideanLSH
    vectors.zipWithIndex.foreach { case (vector: Vector, i: Int) =>
      val result = hash.calculate(randomVector, w, b)(vector)
      result should be(expectedValues(i))
    }
  }

  test("the size of an array to be generated by calculateHashes should be expected") {
    val L = 10
    val vector = Vectors.dense(1.0, 2.0, 3.0, 4.0, 5.0)
    val randomVectors = EuclideanLSH.generateRandomVectors(L, vector.size)

    val hash = new EuclideanLSH
    val w = 2
    val b = 1 // b should be from 0 to w
    val result = hash.calculateHashes(randomVectors)(w, b)(vector)
    result.size should be(L)
  }
}

class EuclideanLSHObjectSuite extends FunSuite with ShouldMatchers {

  test("the random value should be expected") {
    val dimension = 2
    val seed = 1234
    val result = EuclideanLSH.generateRandomVector(dimension, seed)
    val expected = Array(0.14115907833078006, 0.4346588858045114)
    result(0) should be(expected(0))
    result(1) should be(expected(1))
  }

  test("size of an array to be generated should be expected") {
    val L = 10
    val dimension = 5
    val randomVectors = EuclideanLSH.generateRandomVectors(L, dimension)

    randomVectors.size should be(L)
    randomVectors.foreach { randomVector =>
      randomVector.size should be(dimension)
    }
  }

}
